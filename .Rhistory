y <- 2x
y <- 2*x
q <- function (){
2*a
}
q(5)
str
sum
q <- function (a){
2*a
}
q(4)
?stopifnot
q <- function (a){
stopifnot(a >1, a <10)
2*a
}
q (10)
q (10)
q(4)
q(1)
a <- 1
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
View(authors)
summary (authors)
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
books
View(books)
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
View(`m1`)
View(authors)
View(books)
View(authors)
View(books)
View(authors)
View(books)
View(`m1`)
View(authors)
citation()
function
?function
function()
?sum
?function
??function
?`function
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) { x*y
}
What is the value of
f(3)
f <- function (){
return (5)
}
f()
f <- function (){
g <- function(){
return(1)
}
return (2)
}
f
f()
f()()
f <- function (){
function(){
return(1)
}
return (2)
}
f()
f()()
f <- function (){
g <- function(){
return(1)
}
return (2)
}
f
g()
g()
f()
f()()
Main <- function(){
x <- 1:3
function(){
y <- 4:6
some <- x*y
write.csv(some, file = "some")
function(){
z <- 4
another <- y-x
write.csv(another, file = "another")
function() {
r <- c(z, x, y)
write.csv (r, file = "yetanother")
}
}
}
}
}
Main <- function(){
x <- 1:3
function(){
y <- 4:6
some <- x*y
write.csv(some, file = "some")
function(){
z <- 4
another <- y-x
write.csv(another, file = "another")
function() {
r <- c(z, x, y)
write.csv (r, file = "yetanother")
}
}
}
#  function(){
#    x <- c("a", "b")
#    write.csv (x, "last_one.csv")
#  }
}
Main()
Main()()()()
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
y(2)
f(2)
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) { x*y
}
f(2)
y <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
Main <- function(){
x <- 1:3
function(){
y <- 4:6
some <- x*y
write.csv(some, file = "some")
}
#  function(){
#    x <- c("a", "b")
#    write.csv (x, "last_one.csv")
#  }
}
Main()
Main()()
x <- c(1, 3)
y <- c(2, 4)
c(x,y)
Main <- function(){
x <- c(1, 3)
function(){
y <- c(2, 4)
c(x,y)
}
}
Main()
Main()()
Main <- function(){
x <- c(1, 3)
a <- function(){
y <- c(2, 4)
c(x,y)
}
}
Main()
1*Main()
Main()
Main <- function(){
x <- c(1, 3)
a <- function(){
y <- c(2, 4)
}
c(x,y)
}
Main()
a
?env
?environment
Main()()
Main <- function(){
x <- c(1, 3)
a <- function(){
y <- c(2, 4)
c(x,y)
}
}
Main()
Main()()
runif
a <- runif(100, 0, 1)
a
options
?options
options(digits = 2)
a
options(digits = 1)
a
plot (hist(a))
summary(a)
?summary
a <- runif(100, 0, 1)
b <- runif(100, 0, 1)
plot (a,b)
c <- lm(a,b)
c <- lm(a~b)
c
summary (c)
rnorm
a <- rnorm(100, mean = 1, sd = 2)
plot (a)
?rnorm
?data
ls(data)
a <- rnorm(1000, mean = 1, sd = 2)
plot (a)
plot (hist(a))
a[1:50]
a <- rnorm(1000, mean = 1, sd = .5)
plot (hist(a))
a <- rnorm(1000, mean = 1, sd = .5)
plot(a)
plot (hist(a))
a <- rnorm(1000, mean = 1, sd = 5)
plot(a)
plot (hist(a))
a <- rnorm(1000, mean = 1, sd = 1)
plot(a)
plot (hist(a))
a <- rnorm(1000, mean = 1, sd = 10)
plot(a)
plot (hist(a))
a <- rnorm(1000, mean = 1, sd = 10)
plot(a)
plot (hist(a))
plot (density(a))
boxplot(a)
a <- rnorm(1000, mean = 1, sd = 1)
plot(a)
plot (hist(a))
plot (density(a))
boxplot(a)
distributions
rnorm
?rnorm
pnorm
pnorm(a)
qnorm(a)
data
help(data)
?data
data()
ChickWeight
head(ChickWeight)
Chickweight
?Chickweight
??ChickWeight
head(ChickWeight, 20)
table(ChickWeight[,3], ChickWeight[,4])
data(Titanic)
summary(Titanic)
?Titanic
table(Titanic$Age, Titanic$Survived)
table(Titanic[,3], Titanic[,4])
head(Titanic)
str(Titanic)
Titanic <- as.data.frame(Titanic)
View(Titanic)
library(ggplot2)
data(ggplot)
data(diamonds)
head(diamonds)
table(diamonds$clarity)
table(cut)
str(diamonds)
?diamonds
?lm
d <- lm(lm$price~lm$carat)
d <- lm(diamonds$price~diamonds$carat)
summary (d)
d
qplot
qplot(carat, price, data = diamonds)
summary (d)
d
qplot(carat, data = diamonds)
plot(d)
qplot
qplot()
qplot(carat, price, data = diamonds, facets = cut)
qplot(carat, price, data = diamonds, facets = cut)
?formulas
?lm
d <- lm(diamonds$price~diamonds$carat +
diamonds$color)
summary (d)
d[[1]]
d[[2]]
d[[3]]
d[[4]]
summary (d)
d <- lm(diamonds$price~diamonds$carat)
summary (d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color)
summary(d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color +
diamonds$clarity)
summary(d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color +
diamonds$clarity +
diamonds$table)
summary(d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color +
diamonds$clarity +
diamonds$cut)
summary(d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color +
diamonds$clarity +
diamonds$cut +
diamonds$depth)
summary(d)
d <- lm(diamonds$price~diamonds$carat +
diamonds$color +
diamonds$clarity +
diamonds$cut +
diamonds$depth +
diamonds$table)
summary(d)
plot(d)
data(galton)
??galton
p <- ggplot(diamonds, aes(price, carat))
p <- p + geom_point()
p
p <- ggplot(diamonds, aes(carat, price))
p <- p + geom_point()
p
p <- ggplot(diamonds, aes(carat, price))
p <- p + geom_point(colour = cut)
p
?ggplot
agrs(ggplot)
args(ggplot)
ggplot
body(ggplot)
lm
?lm
library (stylo)
library (stylo)
a <- stylo()
getwd()
setwd("~/Desktop/Sneed-R")
a <- stylo()
a <- stylo()
install.packages(c("digest", "mgcv", "RColorBrewer"))
file <- paste (getwd(), paste("boyle", "txt", sep = "."), sep = "/")
boyle <- scan(file = file,
what = "character",
blank.lines.skip = T,
n = 100000,
skip = 20,
sep = "\n",
strip.white = T)
judge_number_cases <- function(judge, number){
a <- NULL
cases <- NULL
number <- number:1
for (i in seq_along(number)){
if (number[i] < 10){a <- paste("00", number[i], sep = "")}else{
if (number[i] < 100){a <- paste("0", number[i], sep = "")}else{
a <- as.character(number[i])
}
}
cases[i] <- paste(judge, a, sep = "_")
}
cases
}
divide_into_cases  <- function(){
begin <- grep("^\\(Cite as: (.*)\\)$", boyle, value = F)
end   <- (grep("^END OF DOCUMENT$", boyle, value = F))
begin <- begin[1:length(end)]
file_name <- judge_number_cases("boyle", length(begin)) #function call
for(i in 1:length(file_name)) {
mycase <- paste (boyle[begin[i]: end[i]], collapse = " ")
file <- paste(getwd(), "test", file_name[i], sep = "/") #create "test" directory
write(mycase, file = file)
}
}
read_file <- function (judge){
paste (getwd(), paste("boyle", "txt", sep = "."), sep = "/")
judge <- scan(file = file,
what = "character",
blank.lines.skip = T,
n = 100000,
skip = 20,
sep = "\n",
strip.white = T)
}
read_file("boyle")
read_file <- function (judge){
paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
judge <- scan(file = file,
what = "character",
blank.lines.skip = T,
n = 100000,
skip = 20,
sep = "\n",
strip.white = T)
}
read_file <- function (judge){
paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
judge <- scan(file = file,
what = "character",
blank.lines.skip = T,
n = 100000,
skip = 20,
sep = "\n",
strip.white = T)
}
read_file(boyle)
read_file(boyle)
read_file(boyle)
read_file("boyle")
read_file <- function (judge){
file <- paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
}
read_file <- function (judge){
file <- paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
}
read_file()
read_file(judge = "boyle")
read_file(judge = "boyle")
read_file <- function (judge){
file <- paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
print (file)
}
read_file(judge = "boyle")
getwd()
read_file <- function (judge){
file <- paste (getwd(), paste(judge, "txt", sep = "."), sep = "/")
author <- scan(file = file,
what = "character",
blank.lines.skip = T,
n = 100000,
skip = 20,
sep = "\n",
strip.white = T)
print (file)
print (head(author))
}
read_file(judge = "boyle")
list.files()
?list.files()
list.files(pattern = ^b)
list.files(pattern = "^b")
list.files(pattern = "^[Bb]")
list.files(pattern = ".txt$")
list.files(pattern = ".R$")
list.files()
list.files(pattern = "^[Ss](.*)\\.txt")
pattern = "_"
list.files(pattern = pattern)
pattern = " "
list.files(pattern = pattern)
pattern = "."
list.files(pattern = pattern)
pattern = "b."
list.files(pattern = pattern)
list.files(pattern = pattern, recursive = T)
pattern = "boyle"
list.files(pattern = pattern, recursive = T)
list.files(pattern = pattern, recursive = T, include.dirs = T)
list.dirs()
list.dirs(recursive = T)
stopifnot()
?stopifnot()
